<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!--
1절
<mapper namespace="memberMapper">
-->

<mapper namespace="com.kh.hyper.member.model.dao.MemberMapper">
<!-- 	
	MyBatis를 통해 DAO 인터페이스를 구현하는 방법			
	1. namespace에 사용할 인터페이스의 풀 클래스명을 입력한다.			
	2. DB관련 정보를 기술하는 root-context.xml 하단의 Namespaces의 configure
		 beans, mybatis-spring 항목을 체크 후 저장 
	3. mybatis가 스캔할 dao의 경로를 입력한다. (scan태그 사용)
		<mybatis-spring:scan base-package="com.kh.hyper.member.model.dao" />
-->


	<!-- 로그인용 쿼리문 1절 -->
	<select id="login" parameterType="member" resultType="member">
		SELECT
			   USER_ID userId,
			   USER_PWD userPwd,
			   USER_NAME userName,
			   EMAIL,
			   GENDER,
			   AGE,
			   PHONE,
			   ADDRESS,
			   ENROLL_DATE enrollDate,
			   MODIFY_DATE modifyDate,
			   STATUS
	 	  FROM
	 	  	   MEMBER
	 	 WHERE
	 	 	   STATUS = 'Y'
	 	   AND
	 	   	   USER_ID = #{userId}
	 	   <!--  2절
	 	   사용자 입력과 암호화 된 USER_PWD 를 비교하면 절대 true가 나올 수 없다
	 	   컨트롤러에서 조건문을 쓰자
	 	    
	 	   AND
	 	   	   USER_PWD = #{userPwd}
	 	   -->
	
	</select>
	
	<!-- 회원가입용 쿼리문 -->
	<insert id="join" parameterType="member">
		INSERT
		  INTO
		       MEMBER
		       (
		       USER_ID,
		       USER_PWD,
		       USER_NAME,
		       EMAIL,
		       GENDER,
		       AGE,
		       PHONE,
		       ADDRESS
		       )
		VALUES
			   (
			   #{userId},
			   #{userPwd},
			   #{userName},
			   #{email},
			   #{gender},
			   #{age},
			   #{phone},
			   #{address}
			   )
	
	</insert>
	
	<!-- 회원 정보 수정 쿼리 -->
	
	<update id="updateMember" parameterType="member">
		UPDATE
			   MEMBER
		   SET
		   	   USER_NAME = #{userName},
		   	   EMAIL = #{email},
		   	   AGE = #{age},
		   	   PHONE = #{phone},
		   	   ADDRESS = #{address},
		   	   GENDER = #{gender},
		   	   MODIFY_DATE = #{modifyDate}
		 WHERE
			   USER_ID = #{userId}
	
	</update>
	
	<!-- 회원탈퇴용 SQL -->
	<update id="deleteMember" parameterType="member">
		UPDATE
			   MEMBER
		   SET
		   	   STATUS = 'Y',
		   	   MODIFY_DATE = SYSDATE
		 WHERE
			   USER_ID = #{userId}
			   
	</update>
	
	<!-- 다중 트랜잭션 용 INSERT구문 -->
	<insert id="test">
		INSERT
		  INTO
		  	   TB_TEST
		VALUES
			   (
			   1,
			   '1'
			   )
	</insert>
	
	<!-- 아이디 중복체크용 쿼리문 -->
	
		 	   <!-- ** USER_ID 파라미터가 단 하나일 경우 변수명이 아니라
		 	   		뭔가 값이 하나 들어왔는지만을 체크 하고 동작한다.
		 	   		=> 변수명이 일치하지 않아도 문제없이 작동은 한다 -->
	<select id="checkId" resultType="_int">
		SELECT
			   COUNT(*)
		  FROM
		  	   MEMBER
		 WHERE
		 	   USER_ID = #{userId}
		   AND
		   	   STATUS = 'Y'
	</select>
















</mapper>